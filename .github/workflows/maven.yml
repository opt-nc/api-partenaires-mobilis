# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven
name: Build

on: [push]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 17
      uses: actions/setup-java@v2
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: 'maven'

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    # Login against a Docker registry except on PR
    - name: Log into registry docker hub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.OPT_DOCKERHUB_LOGIN }}
        password: ${{ secrets.OPT_DOCKERHUB_PASSWORD }}

    - name: Get Maven Metadata
      id: project
      run: |
        echo ::set-output name=version::$(mvn -q -Dexec.executable=echo -Dexec.args='${project.version}' --non-recursive exec:exec)

    - name: Build with Maven
      run: mvn -B spring-boot:build-image -Dspring-boot.build-image.imageName=optnc/api-partenaires-mobilis:${{ steps.project.outputs.version }}
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Push docker image to Docker Hub
      run: docker push optnc/api-partenaires-mobilis:${{ steps.project.outputs.version }}

  conventional-commits-versionning-and-docker:
    needs: [build]
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
    name: Bump version and create release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install NodeJS
        uses: actions/setup-node@v2
        with:
          node-version: 14.x
      - name: Install Semantic release and maven-semantic-release plugin
        run: |
          npm install -g semantic-release \
          @conveyal/maven-semantic-release @semantic-release/git \
          @semantic-release/changelog
      - name: Run semantic release to bump version and create release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npx semantic-release --skip-maven-deploy

      # et maintenant... Docker (pas de job pour rester sur le même repo potentiellement taggé)
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'maven'

      - name: Prepare tags
        id : image_tags
        run: |
           VERSION=$(git describe --tags --exact-match 2>/dev/null || true)
           if [[ $VERSION ]]; then
            echo ::set-output name=tags::"latest,stable,${VERSION##v}"
           else
            echo ::set-output name=tags::"latest"
           fi

      # Login against a Docker registry except on PR
      - name: Log into registry docker hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.OPT_DOCKERHUB_LOGIN }}
          password: ${{ secrets.OPT_DOCKERHUB_PASSWORD }}

      - name: Publish on Docker Hub with
        run: mvn -B -Djib.to.tags=${{steps.image_tags.outputs.tags}} compile jib:build

      # This will only write to the public Rekor transparency log when the Docker
      # repository is public to avoid leaking data.  If you would like to publish
      # transparency data even for private images, pass --force to cosign below.
      - name: Write signing key to disk (only needed for `cosign sign --key`)
        run: echo "${{ secrets.DOCKER_SIGNING_SECRET }}" > cosign.key
      - name: Install cosign
        uses: sigstore/cosign-installer@main
      - name: Sign the published Docker image
        # This step uses the identity token to provision an ephemeral certificate
        # against the sigstore community Fulcio instance.
        run: cosign sign --key cosign.key $(cat target/jib-image.json | jq -r '.image + "@" + .imageDigest')
